// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id               String        @id @default(cuid())
  phone            String        @unique /// @middleware(name: "formatPhone", type: "before")
  name             String?
  isRegistered     Boolean       @default(false)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  givenLikes       Like[]        @relation("FromUser")
  receivedLikes    Like[]        @relation("ToUser")
  notification     Notification?
  givenQuizLogs    QuizLog[]     @relation("QuizFromUser")
  receivedQuizLogs QuizLog[]     @relation("QuizToUser")
}

model Notification {
  id        String   @id @default(cuid())
  token     String
  isEnabled Boolean  @default(true)
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        String    @id @default(cuid())
  fromUser  User      @relation("FromUser", fields: [fromId], references: [id])
  fromId    String
  toUser    User      @relation("ToUser", fields: [toId], references: [id])
  toId      String
  createdAt DateTime  @default(now())
  deletedAt DateTime?

  @@unique([fromId, toId, createdAt])
}

model Quiz {
  id        String    @id @default(cuid())
  question  String
  showedAt  DateTime?
  quizLogs  QuizLog[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model QuizLog {
  id        String   @id @default(cuid())
  quiz      Quiz     @relation(fields: [quizId], references: [id])
  quizId    String
  fromUser  User     @relation("QuizFromUser", fields: [fromId], references: [id])
  fromId    String
  toUser    User     @relation("QuizToUser", fields: [toId], references: [id])
  toId      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
